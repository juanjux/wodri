Backend-API:
    - Implement -/conversation/:id

    - Move unittest to apiobjects.d

Backend-Retriever:
    - Regenerate unittest files

    - Envelope.asJsonString and use it on db.d

    - Conversation.updateLastDate => validate the date!

    - When the message failed to enter (validation error, or error on save)
      generate a rebound using our message sending system (when implemented)

    - Exception classes for the different parts. 

    - Retriever's full test, use a Python script with the mail & smtp modules to
      parse the test mails collection changing the receiver from [myRealAddr] to
      [mongoTestAddr] before delivering to Postfix, create a MongoDB database
      "webmailtest", populate it, check that we receive every email, check that
      that the isValidAddress check is fine, check that the filters of the test DB
      apply correctly, check searches with the indexer, et cetera.

    - Sent the new changes in characterencodings.d to Ruppe


Frontend:

Contacts:
    - When a message is received and the email is not found on the Contacts collection,
      store as a new contact with Name, Surname, Email, Tags and put the tag "autoinserted".
    - Use it for getting the shortnames in the ConversationSummary object.

All:
    - Import cleanup (only imports and symbols really used)
    - Const, immutable, pure, nothrow, in, out, safe et all
    - Mongo DB indexes, ensure()
    - See how to get around Mongo's 16MB document limit for bigger emails
      (GridFS?) Check is some email of my collection is bigger than 16MB without
      attachments (=> no)

Installation/Configuration system:
