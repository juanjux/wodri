Backend-API:
    - search with auth (see below)

Backend-Retriever:
    - lazy: evaluate any *id parameter to see if I can make it lazy (check that it is only
      used once inside the function).
    - add emailIndexContents.userId, add the userId discriminator to Email.search
    - Email.get(id) and Email.emailDocToObject
    - conversation.getByTag: add "attachNames" to every link to avoid reading all the emails
      when retrieving a conversation just to get the attachment filenames 
    - general hunting of XXX and FIXMEs
    - unittest for every curl call for wrong auth user

    Later:
    - Use log to log more warnings, specially on db.*

    - When the message failed to enter (validation error, or error on save)
      generate a rebound using our message sending system (when implemented)

    - Exception classes for the different parts that throw.

    - Retriever's full test, use a Python script with the mail & smtp modules to
      parse the test mails collection changing the receiver from [myRealAddr] to
      [mongoTestAddr] before delivering to Postfix, create a MongoDB database
      "webmailtest", populate it, check that we receive every email, check that
      that the isValidAddress check is fine, check that the filters of the test DB
      apply correctly, check searches with the indexer, et cetera.

    - Sent the new changes in characterencodings.d to Ruppe

    - When adding or removing links from a conversation, update conversation.lastDate

    - Review ORMs for D (Hybernated and others)

Frontend:

Contacts:
    - When a message is received and the email is not found on the Contacts collection,
      store as a new contact with Name, Surname, Email, Tags and put the tag "autoinserted".

    - Use it for getting the shortnames in the ConversationSummary object.

All:
    - Write more dirty tests, most of them are clean
    - Authentication with scrypt hashing instead of MD5
    - Run dub with code converage option
    - Import cleanup (only imports and symbols really used)
    - See how to get around Mongo's 16MB document limit for bigger emails
      (GridFS?) Check is some email of my collection is bigger than 16MB without
      attachments (=> no)

Installation/Configuration system:
