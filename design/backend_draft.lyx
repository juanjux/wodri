#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Part
Mail Retrieval And Storage Module
\end_layout

\begin_layout Section*
MTA
\end_layout

\begin_layout Itemize
Receives mail from the Internet.
 Provides a completed SMTP implementation and security.
 
\end_layout

\begin_layout Itemize
Relays mail to the Retriever module.
\end_layout

\begin_layout Itemize
Postfix, Courier MTA, Exim, etc...
\end_layout

\begin_layout Section*
Retriever
\end_layout

\begin_layout Itemize
Retrieves the messages from the MTA via SMTP relay.
\end_layout

\begin_layout Itemize
Create an instance of ProtoMail (the object used before storing into MongoDB).
\end_layout

\begin_layout Itemize
Extract the parts using munpack (or similar program or library), including
 text parts.
 
\end_layout

\begin_deeper
\begin_layout Itemize
The text parts go to ProtoMail.txt and ProtoMail.html
\end_layout

\begin_layout Itemize
The attachments are stored into the filesystem with unique id-style names
 and their values added to ProtoMail.attachments, which is a list of a struct:
 filesystem_path, type, size.
\end_layout

\begin_layout Itemize
Move the original RAW message into a temporal file and store its path in
 the ProtoMail.rawPath member.
\end_layout

\begin_layout Itemize
Create a modified RAW text with the attachments replaced by the {filesystem_path
, mimetype and original_name}, save in ProtoMail.RawMinus.
\end_layout

\begin_layout Itemize
Save some headers (From, To, Cc, Bcc, Date, Subject, Message-ID, References,
 In-Reply-To) to a struct and save the struct in ProtoMail.Headers.
\end_layout

\begin_layout Itemize
Add the ProtoMail to a list
\end_layout

\begin_layout Itemize
Create a tagger thread with a reference to the ProtoMail object and process
 the next message.
\end_layout

\end_deeper
\begin_layout Section*
Tagger
\end_layout

\begin_layout Itemize
Create an empty tag list (just a string list will do).
\end_layout

\begin_layout Itemize
Put the ProtoMail.RAW trought the spamfilter.
 If possitive, add a 
\begin_inset Quotes eld
\end_inset

spam
\begin_inset Quotes erd
\end_inset

 tag to the local tag list.
 Once this is done, the ProtoMail.rawPath member and file can be deleted.
\end_layout

\begin_layout Itemize
Pass the ProtoMail object to a DefaultTagger method.
 This should add the internal tags 
\begin_inset Quotes eld
\end_inset

inbox
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

unread
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

attachments
\begin_inset Quotes erd
\end_inset

, etc.
\end_layout

\begin_layout Itemize
Get/Insert a ProtoMail.conversationId, for this:
\end_layout

\begin_deeper
\begin_layout Itemize
If the message is a thread-starter (no In-Reply-To, no References), create
 a new ConversationDoc and add this MessageID to that doc.
\end_layout

\begin_layout Itemize
Check if the id of the previous message (In-Reply-To) is in the list of
 ids of some ConversationDoc in the Conversations collection.
 If it does, the conversation_id will be that one (add this MessageId to
 that doc).
\end_layout

\begin_layout Itemize
If not, for every messageid in the mail 
\begin_inset Quotes eld
\end_inset

References
\begin_inset Quotes erd
\end_inset

 field, from bottom to top, search for that id in the Conversation collections.
 If that ids is associated with the ConversationDoc, that conversationid
 will be the one (add this MessageId to that doc).
\end_layout

\begin_layout Itemize
If no ConversationDoc is found containing any Reference, create a new Conversati
onDoc, add this MessageID to that doc and get the conversation_id.
\end_layout

\end_deeper
\begin_layout Itemize
Check the 
\begin_inset Quotes eld
\end_inset

In-Reply-To
\begin_inset Quotes erd
\end_inset

 header and try to find that message id in the MongoDB Conversations collection.
 This collection has a ConversationTag id and a list of messages.
 If a ConversationId is found, add it to ProtoMail.conversationTag.
 XXX add the message id to the relevant ConversationTag document when inserting.
\end_layout

\begin_layout Itemize
Run the applyUserFilters method.
 This will check the user rules and return a list of tags to add and another
 one of tags to remove (
\begin_inset Quotes eld
\end_inset

trash
\begin_inset Quotes erd
\end_inset

 could be one of these tags).
 Incorporate these lists into the local list.
\end_layout

\begin_layout Itemize
Add the tags list to the ProtoMail.tags member.
\end_layout

\begin_layout Section*
Indexer
\end_layout

\begin_layout Itemize
Create a IndexerTemporalReference document into MongoDB, get the id.
 
\end_layout

\begin_layout Itemize
Create a document for indexing.
 This will be formed by ProtoMail.text or, if missing, the HTML-stripped
 ProtoMail.html plus the text extracted from the attachments of textual type
 like DOC, HTML, TXT, PDF, etc.
\end_layout

\begin_layout Itemize
Run the indexer software/library (Sphinx, Solr, ElasticSearch or similar)
 using the MongoDB id.
\end_layout

\begin_layout Section*
Storer
\end_layout

\begin_layout Itemize
Extract the contacts from the From and To fields (Cc and Bcc too?), for
 every contact check if their email is in the MongoDB and if not create
 a ContactDoc {name, email} and insert it into MongoDB.
 Create a hash with contact_as_in_email: id.
\end_layout

\begin_layout Itemize
Create a MailDocument (JSON) with these fields:
\end_layout

\begin_deeper
\begin_layout Itemize
Headers: put the original contact as shown on the email, not the id.
\end_layout

\begin_layout Itemize
Text: the body text (if any).
\end_layout

\begin_layout Itemize
HTML: the body html (if any).
\end_layout

\begin_layout Itemize
Attachments: subdoc with the path, mime, and original_name of the attachments.
\end_layout

\begin_layout Itemize
RawMinus: ProtoMail.rawMinus
\end_layout

\begin_layout Itemize
tags are stored as a simple list (no Collection).
\end_layout

\begin_layout Itemize
IndexId: the IndexerTemporalReference.
 Then, delete the IndexerTemporalReference from its Collection (it's only
 used to get a unique id while indexing).
\end_layout

\begin_layout Itemize
ConversationId
\end_layout

\end_deeper
\begin_layout Part
API for the frontend
\end_layout

\begin_layout Section*
Objects
\end_layout

\begin_layout Subsection*
MessageSummary
\end_layout

\begin_layout Standard
Used to produce a list of messages from a conversation without fully loading
 the mails (all the messages shown as a header when you load a conversation,
 that is all except the last one or the one you click to expand) .
 The relevant parts when clicked (full body, mimetypes, To, Cc, Bcc, link
 to attachments) can be loaded without reloading what we already have.
\end_layout

\begin_layout Itemize
Subject
\end_layout

\begin_layout Itemize
From
\end_layout

\begin_layout Itemize
Date
\end_layout

\begin_layout Itemize
Attachment filenames
\end_layout

\begin_layout Itemize
Tags
\end_layout

\begin_layout Itemize
First words of the text
\end_layout

\begin_layout Standard
XXX MESSAGE
\end_layout

\begin_layout Subsection*
ConversationSummary
\end_layout

\begin_layout Standard
These are the entries shown on a tag list (Inbox, Sent, etc).
 It has:
\end_layout

\begin_layout Itemize
Participants
\end_layout

\begin_layout Itemize
Participant's avatar icons
\end_layout

\begin_layout Itemize
Message count
\end_layout

\begin_layout Itemize
Date of the last message
\end_layout

\begin_layout Itemize
Original subject
\end_layout

\begin_layout Itemize
Tags
\end_layout

\begin_layout Itemize
Attachment filenames
\end_layout

\begin_layout Subsection*
Conversation
\end_layout

\begin_layout Standard
Clicking on a ConversationSummary will display a ConversationList.
 This object will have:
\end_layout

\begin_layout Itemize
One MessageSummary for every message in the conversation.
\end_layout

\begin_layout Itemize
One or more FullMessage snormal ConversationList will have the last message
 as a FullMessage, a ConversationList clicked from a search result will
 have all the messages matching the search as FullMessages
\end_layout

\begin_layout Standard
XXX ConversationList: conversationsummary objects + number of conversations
\end_layout

\begin_layout Section*
API REST
\end_layout

\begin_layout Subsection*
get: /tag/name/page
\end_layout

\begin_layout Standard
Get the last ConversationSummary objects for that tagname.
 The number of ConversationSummaries returned would depend on the user configura
tion.
 
\end_layout

\begin_layout Subsection*
post: /tag/name
\end_layout

\begin_layout Standard
Create a new tag name with an optional description and color in the POST
 data.
\end_layout

\begin_layout Subsection*
get: /conversation/id
\end_layout

\begin_layout Standard
Get a Conversation with the specified id.
\end_layout

\begin_layout Subsection*
get: /message/id
\end_layout

\begin_layout Standard
Get a full message.
\end_layout

\begin_layout Subsection*
get: /message/id/attachments/name
\end_layout

\begin_layout Standard
Get an attachment.
\end_layout

\begin_layout Subsection*
get: /message/id/raw
\end_layout

\begin_layout Standard
Get the original raw message.
\end_layout

\begin_layout Subsection*
post: /message/id/reply
\end_layout

\begin_layout Standard
Reply to the message.
\end_layout

\begin_layout Subsection*
post: /message/id/forward
\end_layout

\begin_layout Standard
Forward the message
\end_layout

\begin_layout Subsection*
delete: /message/id
\end_layout

\begin_layout Standard
Put the 
\begin_inset Quotes eld
\end_inset

trash
\begin_inset Quotes erd
\end_inset

 tag to the message or delete it if already on the trash.
\end_layout

\end_body
\end_document
