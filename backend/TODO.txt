Backend-API:
    - DELETE /api/:id/email?purge=0 => set the "deleted" field of the envelope to true
    (add a deleted field to the email document, CHECK FILTERS)

    purge=1: remove the envelope from the DB, and if it was the only envelope remove
    the email

    Deleted: should be considered when displaying conversations in the frontend

    getConversation: check the envelope for that user and email, add the deleted field
    to the ApiEmail struct before returning it.

    Unittests of all this.

Backend-Retriever:
    - Revisar XXX
    - unittest: User.getUserHash, User.getPasswordHash, User.addressIsLocal

    - Sacar de mongo.d:
        domain.d:
            addressIsLocal
            domainHasDefaultUser


    - Ver que hacer con g_mongoDB...



    - dbtypes:
        Config
        User
        Domain


    Later:
    - Use log to log more warnings, specially on db.d

    - When the message failed to enter (validation error, or error on save)
      generate a rebound using our message sending system (when implemented)

    - Exception classes for the different parts that throw.

    - Retriever's full test, use a Python script with the mail & smtp modules to
      parse the test mails collection changing the receiver from [myRealAddr] to
      [mongoTestAddr] before delivering to Postfix, create a MongoDB database
      "webmailtest", populate it, check that we receive every email, check that
      that the isValidAddress check is fine, check that the filters of the test DB
      apply correctly, check searches with the indexer, et cetera.

    - Sent the new changes in characterencodings.d to Ruppe

Frontend:

Contacts:
    - When a message is received and the email is not found on the Contacts collection,
      store as a new contact with Name, Surname, Email, Tags and put the tag "autoinserted".
    - Use it for getting the shortnames in the ConversationSummary object.

All:
    - See why after a test_db_all Mongo turns crazy and gets all the CPU
    - Authentication with scrypt hashing instead of MD5
    - Run dub with code converage option
    - Import cleanup (only imports and symbols really used)
    - Const, immutable, pure, nothrow, in, out, safe et all
    - Add ensureTextIndex to Vibed and use it on mongo.d::ensure
    - See how to get around Mongo's 16MB document limit for bigger emails
      (GridFS?) Check is some email of my collection is bigger than 16MB without
      attachments (=> no)

Installation/Configuration system:
